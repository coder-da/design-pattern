策略模式：定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。

示例：一个动作冒险游戏，代表游戏角色的类和角色可以使用的武器行为的类。每个角色一次只能使用一种武器，但是可以在游戏的过程中换武器。

分析：
1.会有皇帝、王后、骑士等多个角色，他们都继承Character类。他们可以使用不同的武器，即fight方法有不同的表现，直接使用继承，代码容易重复。
2.我们使用武器的行为提取出来，若设计成多个角色实现接口才能使用武器，还是没有达到复用的目的。为此，我们将行为封装成接口，当做Character
的成员变量，传入不同的实现就能使用不同的武器。
3.对于Character类，我们则提供set方法，实现能动态的更换武器。
