工厂方法模式：定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。
抽象工厂模式：提供一个接口，用于创建相关或依赖对象的家族，而不需要明确制定具体类。

示例（简单工厂）：有一个披萨店，可以生成不同类型的披萨

分析：
1、披萨有多重类型（素食、希腊等多种风味），我们需要根据不同风味创建不同的披萨对象
2、风味会改变，我们应将创建对象的部分封装起来
3、用一个工厂类管理对象的创建，而不是在披萨店类中管理。

总结：这种将new对象过程封装成工厂类的做法就是简单工厂

————————————————————————————————————————————————————————————————————————————————————

示例（工厂方法）：现在，披萨店开连锁店，希望根据不同地方有自己的差异口味，但又希望规范分店的操作

分析：
1、如果针对每个地方生成一个简单工厂，多个披萨店类就无法控制切片，打包，准备操作等流程的一致性
2、所以将createPizza方法放回PizzaStore类，但设定成抽象方法，就提供了一个模板框架管理各分店
3、每一个分店继承抽象披萨店类，提供自己的工厂方法

总结：将生成对象的过程定义为抽象方法，各子类继承它从而不同工厂提供各自不同的对象，这就是工厂方法

—————————————————————————————————————————————————————————————————————————————————————

示例（抽象工厂）：建一家生产原料的工厂，并将原料运送到各家加盟店。但不同地点，又有各自独特的原料（如纽约和芝加哥的红酱料不一样）

分析：
1、首先，需要提供一个接口，用于生产各种原料
2、不同的地方，有不同的原料工厂实现接口，并生产各自独特的原料
3、在pizza类中组合一个原料工厂的接口，提供一个抽象方法获取各种原料
4、在PizzaStore中传入原料工厂的接口，同时传入createPizza方法内

总结：定义一个负责创建一组产品的接口，接口内的每个方法都负责创建一个具体的产品，同时我们利用实现抽象工厂的子类来提供这些具体的做法。